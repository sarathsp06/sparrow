// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/webhook.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/sarathsp06/sparrow/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebhookServiceName is the fully-qualified name of the WebhookService service.
	WebhookServiceName = "webhook.WebhookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebhookServiceRegisterWebhookProcedure is the fully-qualified name of the WebhookService's
	// RegisterWebhook RPC.
	WebhookServiceRegisterWebhookProcedure = "/webhook.WebhookService/RegisterWebhook"
	// WebhookServiceUnregisterWebhookProcedure is the fully-qualified name of the WebhookService's
	// UnregisterWebhook RPC.
	WebhookServiceUnregisterWebhookProcedure = "/webhook.WebhookService/UnregisterWebhook"
	// WebhookServicePushEventProcedure is the fully-qualified name of the WebhookService's PushEvent
	// RPC.
	WebhookServicePushEventProcedure = "/webhook.WebhookService/PushEvent"
	// WebhookServiceGetWebhookStatusProcedure is the fully-qualified name of the WebhookService's
	// GetWebhookStatus RPC.
	WebhookServiceGetWebhookStatusProcedure = "/webhook.WebhookService/GetWebhookStatus"
	// WebhookServiceListWebhooksProcedure is the fully-qualified name of the WebhookService's
	// ListWebhooks RPC.
	WebhookServiceListWebhooksProcedure = "/webhook.WebhookService/ListWebhooks"
)

// WebhookServiceClient is a client for the webhook.WebhookService service.
type WebhookServiceClient interface {
	// RegisterWebhook registers a URL for specific events in a namespace
	RegisterWebhook(context.Context, *connect.Request[proto.RegisterWebhookRequest]) (*connect.Response[proto.RegisterWebhookResponse], error)
	// UnregisterWebhook removes a webhook registration
	UnregisterWebhook(context.Context, *connect.Request[proto.UnregisterWebhookRequest]) (*connect.Response[proto.UnregisterWebhookResponse], error)
	// PushEvent pushes an event that triggers registered webhooks
	PushEvent(context.Context, *connect.Request[proto.PushEventRequest]) (*connect.Response[proto.PushEventResponse], error)
	// GetWebhookStatus gets the status of webhook deliveries
	GetWebhookStatus(context.Context, *connect.Request[proto.GetWebhookStatusRequest]) (*connect.Response[proto.GetWebhookStatusResponse], error)
	// ListWebhooks lists all registered webhooks for a namespace
	ListWebhooks(context.Context, *connect.Request[proto.ListWebhooksRequest]) (*connect.Response[proto.ListWebhooksResponse], error)
}

// NewWebhookServiceClient constructs a client for the webhook.WebhookService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebhookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebhookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	webhookServiceMethods := proto.File_proto_webhook_proto.Services().ByName("WebhookService").Methods()
	return &webhookServiceClient{
		registerWebhook: connect.NewClient[proto.RegisterWebhookRequest, proto.RegisterWebhookResponse](
			httpClient,
			baseURL+WebhookServiceRegisterWebhookProcedure,
			connect.WithSchema(webhookServiceMethods.ByName("RegisterWebhook")),
			connect.WithClientOptions(opts...),
		),
		unregisterWebhook: connect.NewClient[proto.UnregisterWebhookRequest, proto.UnregisterWebhookResponse](
			httpClient,
			baseURL+WebhookServiceUnregisterWebhookProcedure,
			connect.WithSchema(webhookServiceMethods.ByName("UnregisterWebhook")),
			connect.WithClientOptions(opts...),
		),
		pushEvent: connect.NewClient[proto.PushEventRequest, proto.PushEventResponse](
			httpClient,
			baseURL+WebhookServicePushEventProcedure,
			connect.WithSchema(webhookServiceMethods.ByName("PushEvent")),
			connect.WithClientOptions(opts...),
		),
		getWebhookStatus: connect.NewClient[proto.GetWebhookStatusRequest, proto.GetWebhookStatusResponse](
			httpClient,
			baseURL+WebhookServiceGetWebhookStatusProcedure,
			connect.WithSchema(webhookServiceMethods.ByName("GetWebhookStatus")),
			connect.WithClientOptions(opts...),
		),
		listWebhooks: connect.NewClient[proto.ListWebhooksRequest, proto.ListWebhooksResponse](
			httpClient,
			baseURL+WebhookServiceListWebhooksProcedure,
			connect.WithSchema(webhookServiceMethods.ByName("ListWebhooks")),
			connect.WithClientOptions(opts...),
		),
	}
}

// webhookServiceClient implements WebhookServiceClient.
type webhookServiceClient struct {
	registerWebhook   *connect.Client[proto.RegisterWebhookRequest, proto.RegisterWebhookResponse]
	unregisterWebhook *connect.Client[proto.UnregisterWebhookRequest, proto.UnregisterWebhookResponse]
	pushEvent         *connect.Client[proto.PushEventRequest, proto.PushEventResponse]
	getWebhookStatus  *connect.Client[proto.GetWebhookStatusRequest, proto.GetWebhookStatusResponse]
	listWebhooks      *connect.Client[proto.ListWebhooksRequest, proto.ListWebhooksResponse]
}

// RegisterWebhook calls webhook.WebhookService.RegisterWebhook.
func (c *webhookServiceClient) RegisterWebhook(ctx context.Context, req *connect.Request[proto.RegisterWebhookRequest]) (*connect.Response[proto.RegisterWebhookResponse], error) {
	return c.registerWebhook.CallUnary(ctx, req)
}

// UnregisterWebhook calls webhook.WebhookService.UnregisterWebhook.
func (c *webhookServiceClient) UnregisterWebhook(ctx context.Context, req *connect.Request[proto.UnregisterWebhookRequest]) (*connect.Response[proto.UnregisterWebhookResponse], error) {
	return c.unregisterWebhook.CallUnary(ctx, req)
}

// PushEvent calls webhook.WebhookService.PushEvent.
func (c *webhookServiceClient) PushEvent(ctx context.Context, req *connect.Request[proto.PushEventRequest]) (*connect.Response[proto.PushEventResponse], error) {
	return c.pushEvent.CallUnary(ctx, req)
}

// GetWebhookStatus calls webhook.WebhookService.GetWebhookStatus.
func (c *webhookServiceClient) GetWebhookStatus(ctx context.Context, req *connect.Request[proto.GetWebhookStatusRequest]) (*connect.Response[proto.GetWebhookStatusResponse], error) {
	return c.getWebhookStatus.CallUnary(ctx, req)
}

// ListWebhooks calls webhook.WebhookService.ListWebhooks.
func (c *webhookServiceClient) ListWebhooks(ctx context.Context, req *connect.Request[proto.ListWebhooksRequest]) (*connect.Response[proto.ListWebhooksResponse], error) {
	return c.listWebhooks.CallUnary(ctx, req)
}

// WebhookServiceHandler is an implementation of the webhook.WebhookService service.
type WebhookServiceHandler interface {
	// RegisterWebhook registers a URL for specific events in a namespace
	RegisterWebhook(context.Context, *connect.Request[proto.RegisterWebhookRequest]) (*connect.Response[proto.RegisterWebhookResponse], error)
	// UnregisterWebhook removes a webhook registration
	UnregisterWebhook(context.Context, *connect.Request[proto.UnregisterWebhookRequest]) (*connect.Response[proto.UnregisterWebhookResponse], error)
	// PushEvent pushes an event that triggers registered webhooks
	PushEvent(context.Context, *connect.Request[proto.PushEventRequest]) (*connect.Response[proto.PushEventResponse], error)
	// GetWebhookStatus gets the status of webhook deliveries
	GetWebhookStatus(context.Context, *connect.Request[proto.GetWebhookStatusRequest]) (*connect.Response[proto.GetWebhookStatusResponse], error)
	// ListWebhooks lists all registered webhooks for a namespace
	ListWebhooks(context.Context, *connect.Request[proto.ListWebhooksRequest]) (*connect.Response[proto.ListWebhooksResponse], error)
}

// NewWebhookServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebhookServiceHandler(svc WebhookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	webhookServiceMethods := proto.File_proto_webhook_proto.Services().ByName("WebhookService").Methods()
	webhookServiceRegisterWebhookHandler := connect.NewUnaryHandler(
		WebhookServiceRegisterWebhookProcedure,
		svc.RegisterWebhook,
		connect.WithSchema(webhookServiceMethods.ByName("RegisterWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	webhookServiceUnregisterWebhookHandler := connect.NewUnaryHandler(
		WebhookServiceUnregisterWebhookProcedure,
		svc.UnregisterWebhook,
		connect.WithSchema(webhookServiceMethods.ByName("UnregisterWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	webhookServicePushEventHandler := connect.NewUnaryHandler(
		WebhookServicePushEventProcedure,
		svc.PushEvent,
		connect.WithSchema(webhookServiceMethods.ByName("PushEvent")),
		connect.WithHandlerOptions(opts...),
	)
	webhookServiceGetWebhookStatusHandler := connect.NewUnaryHandler(
		WebhookServiceGetWebhookStatusProcedure,
		svc.GetWebhookStatus,
		connect.WithSchema(webhookServiceMethods.ByName("GetWebhookStatus")),
		connect.WithHandlerOptions(opts...),
	)
	webhookServiceListWebhooksHandler := connect.NewUnaryHandler(
		WebhookServiceListWebhooksProcedure,
		svc.ListWebhooks,
		connect.WithSchema(webhookServiceMethods.ByName("ListWebhooks")),
		connect.WithHandlerOptions(opts...),
	)
	return "/webhook.WebhookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebhookServiceRegisterWebhookProcedure:
			webhookServiceRegisterWebhookHandler.ServeHTTP(w, r)
		case WebhookServiceUnregisterWebhookProcedure:
			webhookServiceUnregisterWebhookHandler.ServeHTTP(w, r)
		case WebhookServicePushEventProcedure:
			webhookServicePushEventHandler.ServeHTTP(w, r)
		case WebhookServiceGetWebhookStatusProcedure:
			webhookServiceGetWebhookStatusHandler.ServeHTTP(w, r)
		case WebhookServiceListWebhooksProcedure:
			webhookServiceListWebhooksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebhookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebhookServiceHandler struct{}

func (UnimplementedWebhookServiceHandler) RegisterWebhook(context.Context, *connect.Request[proto.RegisterWebhookRequest]) (*connect.Response[proto.RegisterWebhookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("webhook.WebhookService.RegisterWebhook is not implemented"))
}

func (UnimplementedWebhookServiceHandler) UnregisterWebhook(context.Context, *connect.Request[proto.UnregisterWebhookRequest]) (*connect.Response[proto.UnregisterWebhookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("webhook.WebhookService.UnregisterWebhook is not implemented"))
}

func (UnimplementedWebhookServiceHandler) PushEvent(context.Context, *connect.Request[proto.PushEventRequest]) (*connect.Response[proto.PushEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("webhook.WebhookService.PushEvent is not implemented"))
}

func (UnimplementedWebhookServiceHandler) GetWebhookStatus(context.Context, *connect.Request[proto.GetWebhookStatusRequest]) (*connect.Response[proto.GetWebhookStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("webhook.WebhookService.GetWebhookStatus is not implemented"))
}

func (UnimplementedWebhookServiceHandler) ListWebhooks(context.Context, *connect.Request[proto.ListWebhooksRequest]) (*connect.Response[proto.ListWebhooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("webhook.WebhookService.ListWebhooks is not implemented"))
}
